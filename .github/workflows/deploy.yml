name: From Docker build and push to AWS EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
      
permissions:
  id-token: write
  contents: read

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: Building TEST image
        run: docker build -t ${{ vars.DOCKER_REPO }}:latest .
      
      - name: Push LATEST version
        if: success()
        run: docker push ${{ vars.DOCKER_REPO }}:latest
          
  deploy-to-aws:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHub-OIDC
          role-session-name: GreenHaven
          aws_default_region: ${{ vars.AWS_REGION }}

      - name: Validate CloudFormation template
        run: |
          echo "Current directory: $(pwd)"
          echo "Template file check:"
          if [ -f "infrastructure/template.yml" ]; then
            echo "Template file found"
            aws cloudformation validate-template \
              --template-body file://infrastructure/template.yml
          else
            echo "Template file not found at: $(pwd)/infrastructure/template.yml"
            exit 1
          fi
        
      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://infrastructure/template.yml

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/template.yml \
            --stack-name main \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              KeyPairName=${{ secrets.KEY_PAIR_NAME }} \
              CertificateArn=${{ secrets.CERTIFICATE_ARN }} \
            --tags \
              Project=my-app-stack \
              Environment=Production \
              ManagedBy=GitHubActions

      - name: TESTING PHASE
        id: stack-outputs
        run: |
          LB_URL=$(aws cloudformation describe-stacks \
            --stack-name main \
            --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerURL'].OutputValue" \
            --output text)
          echo "lb_url=$LB_URL" >> $GITHUB_OUTPUT
          
          LB_DNS=$(aws cloudformation describe-stacks \
            --stack-name main \
            --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue" \
            --output text)
          echo "lb_dns=$LB_DNS" >> $GITHUB_OUTPUT

      - name: Run health check
        run: |
          HEALTH_URL="https://www.iliadiv.online/health"

          timeout 400 bash -c '
            until HTTP_STATUS=$(curl -k -s -o /dev/null -w "%{http_code}" "$0") && [ "$HTTP_STATUS" -eq 200 ]; do
              echo "Waiting for application to respond... (HTTP $HTTP_STATUS)"
              sleep 30
            done
            echo "Health check SUCCESS (HTTP $HTTP_STATUS)"
          ' "$HEALTH_URL"
